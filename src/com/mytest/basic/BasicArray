数组
数组初始值：
数组元素的类型是整数类型（byte、short、int 和 long），则数组元素的值是 0。
数组元素的类型是浮点类型（float、double），则数组元素的值是 0.0。
数组元素的类型是字符类型（char），则数组元素的值是‘\u0000’。
数组元素的类型是布尔类型（boolean），则数组元素的值是 false。
数组元素的类型是引用类型（类、接口和数组），则数组元素的值是 null

数组length：
一维数组直接使用数组的 length 属可性获取数组元素的个数；
二维数组直接使用 length 属性获取的是数组的行数，在指定的索引后加上 length（如 array[0].length）表示的是该行拥有多少个元素，即列数

快速地打印一个二维数组的数据元素列表
System.out.println(Arrays.deepToString(arrayName));

不规则数组
如：int intArray[][] = {{1,2}, {11}, {21,22,23}, {31,32,33}};
动态初始化不规则数组：先初始化高维数组，然后再分别逐个初始化低维数组。代码如下：
int intArray[][] = new int[4][]; //先初始化高维数组为4
// 逐一初始化低维数组
intArray[0] = new int[2];
intArray[1] = new int[1];
intArray[2] = new int[3];
intArray[3] = new int[3];

字符串转字符数组：
String str = "123abc";
char[] arr = str.toCharArray();    // char数组
字符数组转字符串：
char[] arr = { 'a', 'b', 'c' };
String string = String.copyValueOf(arr);  或者  String string = new String(arr)

字符串转byte数组：
String str = "123abc" ;
byte[] arr = str.getBytes();

数组排序：
升序：使用 Arrays.sort(数组名) 语法对数组进行排序，排序规则是从小到大，即升序
降序：1、Arrays.sort(数组名, Collections.reverseOrder());
     2、实现 Comparator 接口的复写 compare() 方法：Arrays.sort(数组名, new MyComparator());
     使用该两种方法时，数组必须是包装类型，如：Integer[]




java.util.Arrays工具类
Arrays 类里均为 static 修饰的方法（static 修饰的方法可以直接通过类名调用）:
1）int binarySearch(type[] a, type key)
使用二分法查询 key 元素值在 a 数组中出现的索引，如果 a 数组不包含 key 元素值，则返回负数。调用该方法时要求数组中元素己经按升序排列，这样才能得到正确结果
2）int binarySearch(type[] a, int fromIndex, int toIndex, type key)
这个方法与前一个方法类似，但它只搜索 a 数组中 fromIndex 到 toIndex 索引的元素。调用该方法时要求数组中元素己经按升序排列，这样才能得到正确结果
3）type[] copyOf(type[] original, int length)
这个方法将会把 original 数组复制成一个新数组，其中 length 是新数组的长度。如果 length 小于 original 数组的长度，则新数组就是原数组的前面 length 个元素，
如果 length 大于 original 数组的长度，则新数组的前面元索就是原数组的所有元素，后面补充 0（数值类型）、false（布尔类型）或者 null（引用类型）。
4）type[] copyOfRange(type[] original, int from, int to)
复制 original 数组的 from 索引到 to - 1 索引的元素。
5）boolean equals(type[] a, type[] a2)
如果 a 数组和 a2 数组的长度相等，而且 a 数组和 a2 数组的数组元素也一一相同，该方法将返回 true。
6）void fill(type[] a, type val)
该方法将会把 a 数组的所有元素都赋值为 val。
7）void fill(type[] a, int fromIndex, int toIndex, type val)
将 a 数组的 fromIndex 到 toIndex 索引的数组元素赋值为 val。
8）void sort(type[] a)
该方法对 a 数组的数组元素进行排序。
9）void sort(type[] a, int fromIndex, int toIndex)
对 fromIndex 到 toIndex 索引的元素进行排序。
10）String toString(type[] a)
该方法将一个数组转换成一个字符串。该方法按顺序把多个数组元素连缀在一起，多个数组元素使用英文逗号,和空格隔开。

以 parallel 开头的方法都表示该方法可利用 CPU 并行的能力来提高性能。
方法中的 xxx 代表不同的数据类型，比如处理 int[] 型数组时应将 xxx 换成 int，处理 long[] 型数组时应将 XXX 换成 long:
1）oid parallelPrefix(xxx[] array, XxxBinaryOperator op)
该方法使用 op 参数指定的计算公式计算得到的结果作为新的元素。op 计算公式包括 left、right 两个形参，
其中 left 代表数组中前一个索引处的元素，right 代表数组中当前索引处的元素，当计算第一个新数组元素时，left 的值默认为 1。
2）void parallelPrefix(xxx[] array, int fromIndex, int toIndex, XxxBinaryOperator op)
重新计算 fromIndex 到 toIndex 索引的元素。
3）void setAll(xxx[] array, IntToXxxFunction generator)
该方法使用指定的生成器（generator）为所有数组元素设置值，该生成器控制数组元素的值的生成算法。
4）void parallelSetAll(xxx[] array, IntToXxxFunction generator)
增加了并行能力，可以利用多 CPU 并行来提高性能。
5）void parallelSort(xxx[] a)
该方法的功能与 Arrays 类以前就有的 sort() 方法相似，只是该方法增加了并行能力，可以利用多 CPU 并行来提高性能。
6）void parallelSort(xxx[] a，int fromIndex, int toIndex)
对 fromIndex 到 toIndex 索引的元素进行排序。
7）Spliterator.OfXxx spliterator(xxx[] array)
将该数组的所有元素转换成对应的 Spliterator 对象。
8）Spliterator.OfXxx spliterator(xxx[] array, int startInclusive, int endExclusive)
转换 startInclusive 到 endExclusive 索引的元素。
9）XxxStream stream(xxx[] array)
该方法将数组转换为 Stream，Stream 是 Java 8 新增的流式编程的 API。
10）XxxStream stream(xxx[] array, int startInclusive, int endExclusive)
将 fromIndex 到 toIndex 索引的元索转换为 Stream。







