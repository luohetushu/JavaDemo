Math.E   E 常量的值：2.718281828459045
Math.PI  PI 常量的值：3.141592653589793

Math类常用方法:求最大值、最小值和绝对值问题
static int abs(int a)	                返回 a 的绝对值
static long abs(long a)	                返回 a 的绝对值
static float abs(float a)	            返回 a 的绝对值
static double abs(double a)	            返回 a 的绝对值
static int max(int x,int y)	            返回 x 和 y 中的最大值
static double max(double x,double y)	返回 x 和 y 中的最大值
static long max(long x,long y)	        返回 x 和 y 中的最大值
static float max(float x,float y)	    返回 x 和 y 中的最大值
static int min(int x,int y)	            返回 x 和 y 中的最小值
static long min(long x,long y)	        返回 x 和 y 中的最小值
static double min(double x,double y)	返回 x 和 y 中的最小值
static float min(float x,float y)	    返回 x 和 y 中的最小值

Math 类的求整方法:
static double ceil(double a)	返回大于或等于 a 的最小整数
static double floor(double a)	返回小于或等于 a 的最大整数
static double rint(double a)	返回最接近 a 的整数值，如果有两个同样接近的整数，则结果取偶数
static int round(float a)	    a>=0返回四舍五入后的整数；a<0返回小于等于（a+0.5）后的最大整数
static long round(double a)	    a>=0返回四舍五入后的整数；a<0返回小于等于（a+0.5）后的最大整数，然后强制转换为长整型
Math.floor:求一个浮点数的地板，向下 求一个最接近它的整数，它的值肯定会小于或等于这个浮点数 Math.floor(-1.5): -2.0
Math.ceil:向上 取接近的整数，它返回的肯定会大于或等于函数参数 Math.ceil(-1.5): -1.0
Math.rint:返回最接近参数的整数，如果有2个数同样接近，则会返回偶数的那个 Math.rint(-1.5): -2.0
Math.round(x) = (int) Math.floor(x + 0.5)  Math.round(-1.5): -1

Math 类三角函数方法：
static double sin(double a)	            返回角的三角正弦值，参数以孤度为单位
static double cos(double a)	            返回角的三角余弦值，参数以孤度为单位
static double asin(double a)	        返回一个值的反正弦值，参数域在 [-1,1]，值域在 [-PI/2,PI/2]
static double acos(double a)	        返回一个值的反余弦值，参数域在 [-1,1]，值域在 [0.0,PI]
static double tan(double a)	            返回角的三角正切值，参数以弧度为单位
static double atan(double a)	        返回一个值的反正切值，值域在 [-PI/2,PI/2]
static double toDegrees(double angrad)	将用孤度表示的角转换为近似相等的用角度表示的角 弧度转角度
static double toRadians(double angdeg)	将用角度表示的角转换为近似相等的用弧度表示的角 角度转弧度
 1 度等于 π/180 弧度，180 度等于 π 弧度

Math 类指数运算方法：指数的运算包括求方根、取对数及其求 n 次方的运算
static double exp(double a)	            返回 e 的 a 次幂
static double pow(double a,double b)	返回以 a 为底数，以 b 为指数的幂值
static double sqrt(double a)	        返回 a 的平方根
static double cbrt(double a)	        返回 a 的立方根
static double log(double a)	            返回 a 的自然对数，即 lna 的值
static double log1p(double x)           返回 x+1 的自然对数，即 ln(x + 1) 的值
static double log10(double a)	        返回以 10 为底 a 的对数, 即 lga 的值


生成一个指定范围之内的随机数字方法：一种是调用 Math 类的 random() 方法，一种是使用 Random 类
Random 类：产生 boolean、int、long、float, byte 数组以及 double 类型的随机数
random() 方法：产生 double 类型的 0~1 的随机数 返回大于等于 0.0、小于 1.0 的 double 类型随机数，即 0<=随机数<1.0

Random 类位于 java.util 包中，该类常用两个构造方法：
Random()：该构造方法使用一个和当前系统时间对应的数字作为种子数，然后使用这个种子数构造 Random 对象。
Random(long seed)：使用单个 long 类型的参数创建一个新的随机数生成器
random类的常用方法：
boolean nextBoolean()	生成一个随机的 boolean 值，生成 true 和 false 的值概率相等
double nextDouble()	    生成一个随机的 double 值，数值介于[0,1.0)，含 0 而不包含 1.0
float nextFloat()	    返回一个随机浮点型数字, 数值介于[0,1.0)，含 0 而不包含 1.0
long nextLong()	        返回一个随机长整型数字
int nextInt()	        生成一个随机的 int 值，该值介于 int 的区间，也就是 -2^31~2^31-1。如果需要生成指定区间的 int 值，则需要进行一定的数学变换
int nextInt(int n)	    生成一个随机的 int 值，该值介于 [0,n)，包含 0 而不包含 n。如果想生成指定区间的 int 值，也需要进行一定的数学变换
double nextGaussian()   返回此随机数生成器序列的、呈高斯（“正态”）分布的double值，其平均值是0.0标准差是1.0
void setSeed(long seed)	重新设置 Random 对象中的种子数。设置完种子数以后的 Random 对象和相同种子数使用 new 关键字创建出的 Random 对象相同


NumberFormat数字格式化
子类DecimalFormat：用于格式化十进制数字，包含一个模式和一组符号
DecimalFormat支持的特殊字符：
0	显示数字，如果位数不够则补 0
#	显示数字，如果位数不够不发生变化
.	小数分隔符
-	减号
,	组分隔符（每几位分隔）
E	分隔科学记数法中的尾数和小数
%	前缀或后缀，乘以 100 后作为百分比显示
?	乘以 1000 后作为千进制货币符显示。用货币符号代替。如果双写，用国际货币符号代替；如果出现在一个模式中，用货币十进制分隔符代替十进制分隔符


大数字运算: 处理性能比较低
 java.math.BigInteger 类是针对整型大数字的处理类
     BigInteger bi = new BigInteger(String val)   val 是数字十进制的字符串
 java.math.BigDecimal 类是针对大小数的处理类 BigDecimal 类支持任何精度的浮点数，可以用来精确计算货币值

 BigInteger类的常用运算方法:
 BigInteger add(BigInteger val)	                  做加法运算
 BigInteger subtract(BigInteger val)	          做减法运算
 BigInteger multiply(BigInteger val)	          做乘法运算
 BigInteger divide(BigInteger val)	              做除法运算
 BigInteger remainder(BigInteger val)	          做取余数运算
 BigInteger[] divideAndRemainder(BigInteger val)	  做除法运算，返回数组的第一个值为商，第二个值为余数
 pow(int exponent)	                  做参数的 exponent 次方运算
 negate()	                          取相反数
 shiftLeft(int n)	                  将数字左移 n 位，如果 n 为负数，则做右移操作
 shiftRight(int n)	                  将数字右移 n 位，如果 n 为负数，则做左移操作
 and(BigInteger val)	              做与运算
 or(BigInteger val)	                  做或运算
 compareTo(BigInteger val)	          做数字的比较运算
 equals(Object obj)	                  当参数 obj 是 Biglnteger 类型的数字并且数值相等时返回 true, 其他返回 false
 min(BigInteger val)	              返回较小的数值
 max(BigInteger val)	              返回较大的数值

 BigDecimal 常用的构造方法:
 BigDecimal(double val)：实例化时将双精度型转换为 BigDecimal 类型
 BigDecimal(String val)：实例化时将字符串形式转换为 BigDecimal 类型

 BigDecimal 类实现加、减、乘和除运算的方法:
 BigDecimal add(BigDecimal augend)             //加法操作
 BigDecimal subtract(BigDecimal subtrahend)    //减法操作
 BigDecimal multiply(BigDecimal multiplieand)    //乘法操作
 BigDecimal divide(BigDecimal divisor,int scale,int roundingMode )    //除法操作
            divide() 方法的 3 个参数分别表示除数、商的小数点后的位数和近似值处理模式
 BigDecimal setScale(int scale, int roundingMode)   //保留小数点，scale为小数点后的位数
 roundingMode 参数支持的处理模式:
 BigDecimal.ROUND_UP	        商的最后一位如果大于 0，则向前进位，正负数都如此
 BigDecimal.ROUND_DOWN	        商的最后一位无论是什么数字都省略
 BigDecimal.ROUND_CEILING	    商如果是正数，按照 ROUND_UP 模式处理；如果是负数，按照 ROUND_DOWN模式处理
 BigDecimal.ROUND_FLOOR	        商如果是正数，按照 ROUND_DOWN 模式处理；如果是负数，按照 ROUND_UP 模式处理
 BigDecimal.ROUND_HALF_DOWN	    对商进行五舍六入操作。如果商最后一位小于等于 5，则做舍弃操作，否则对最后一位进行进位操作
 BigDecimal.ROUND_HALF_UP	    对商进行四舍五入操作。如果商最后一位小于 5，则做舍弃操作，否则对最后一位进行进位操作
 BigDecimal.ROUND_HALF_EVEN	    如果商的倒数第二位是奇数，则按照 ROUND_HALF_UP 处理；如果是偶数，则按照 ROUND_HALF_DOWN 处理



时间日期的处理
java.util.Date 类封装了系统的日期和时间的信息，
Calendar 类则会根据系统的日历来解释 Date 对象

Date 类表示系统特定的时间戳，可以精确到毫秒。Date 对象表示时间的默认顺序是星期、月、日、小时、分、秒、年。
Date 类两个构造方法:
1、Date()：此种形式表示分配 Date 对象并初始化此对象，以表示分配它的时间（精确到毫秒），使用该构造方法创建的对象可以获取本地的当前时间。
2、Date(long date)：此种形式表示从 GMT 时间（格林尼治时间）1970 年 1 月 1 日 0 时 0 分 0 秒开始经过参数 date 指定的毫秒数
     GMT（格林尼治标准时间）与 CST（中央标准时间）相差 8 小时
Date类中的常用方法:
boolean after(Date when)	     判断此日期是否在指定日期之后
boolean before(Date when)	     判断此日期是否在指定日期之前
int compareTo(Date anotherDate)	 比较两个日期的顺序
boolean equals(Object obj)	     比较两个日期的相等性
long getTime()	                 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来，此 Date 对象表示的毫秒数
String toString()	             把此 Date 对象转换为以下形式的 String: dow mon dd hh:mm:ss zzz yyyy。
                                 其中 dow 是一周中的某一天(Sun、Mon、Tue、Wed、Thu、Fri 及 Sat)


Calendar 类是一个抽象类  Calendar c = Calendar.getInstance();
Calendar 对象可以调用 set() 方法将日历翻到任何一个时间，当参数 year 取负数时表示公元前。Calendar 对象调用 get() 方法可以获取有关年、月、日等时间信息
Calendar类的常用方法：
void add(int field, int amount)	        根据日历的规则，为给定的日历字段 field 添加或减去指定的时间量 amount
boolean after(Object when)	            判断此 Calendar 表示的时间是否在指定时间 when 之后，并返回判断结果
boolean before(Object when)	            判断此 Calendar 表示的时间是否在指定时间 when 之前，并返回判断结果
void clear()	                        清空 Calendar 中的日期时间值
int compareTo(Calendar anotherCalendar)	比较两个 Calendar 对象表示的时间值（从格林威治时间 1970 年 01 月 01 日00 时 00 分 00 秒
                                        至现在的毫秒偏移量），大则返回 1，小则返回 -1，相等返回 0
int get(int field)	                    返回指定日历字段的值
int getActualMaximum(int field)	        返回指定日历字段可能拥有的最大值
int getActualMinimum(int field)	        返回指定日历字段可能拥有的最小值
int getFirstDayOfWeek()	                获取一星期的第一天。根据不同的国家地区，返回不同的值
static Calendar getInstance()	                            使用默认时区和语言坏境获得一个日历
static Calendar getInstance(TimeZone zone)	                使用指定时区和默认语言环境获得一个日历
static Calendar getInstance(TimeZone zone,Locale aLocale)	使用指定时区和语言环境获得一个日历
Date getTime()	                        返回一个表示此 Calendar 时间值（从格林威治时间 1970 年 01 月 01 日 00 时00 分 00 秒至现在的毫秒偏移量）的 Date 对象
long getTimeInMillis()	                返回此 Calendar 的时间值，以毫秒为单位
void set(int field, int value)	                                                为指定的日历字段设置给定值
void set(int year, int month, int date)	                                        设置日历字段 YEAR、MONTH 和 DAY_OF_MONTH 的值
void set(int year, int month, int date, int hourOfDay,int minute, int second)	设置字段 YEAR、MONTH、DAY_OF_MONTH、HOUR、 MINUTE 和 SECOND 的值
void setFirstDayOfWeek(int value)	    设置一星期的第一天是哪一天
void setTimeInMillis(long millis)	    用给定的 long 值设置此 Calendar 的当前时间值

Calendar.getInstance().get(Calendar.MONTH)  获取当前月份 month = 0，当前是 1 月份；month = 11，当前是 12 月份
Calendar.YEAR：年份。
Calendar.MONTH：月份。       JANUARY = 0   DECEMBER = 11
Calendar.DATE：日期。
Calendar.DAY_OF_WEEK:       以星期日为第一天,SUNDAY = 1  SATURDAY = 7
Calendar.DAY_OF_MONTH：当天是当月的第几天
Calendar.DAY_OF_YEAR
Calendar.DAY_OF_WEEK_IN_MONTH：当天所在的周是当月第几周
Calendar.HOUR：12小时制的小时。
Calendar.HOUR_OF_DAY：24 小时制的小时。
Calendar.MINUTE：分钟。
Calendar.SECOND：秒。
Calendar.MILLISECOND：毫秒
Calendar.DAY_OF_WEEK：星期几


日期格式化（DateFormat类和SimpleDateFormat类）
DateFormat 是日期/时间格式化子类的抽象类，它以与语言无关的方式格式化并解析日期或时间
DateFormat df = DateFormat.getDateInstance();

DateFormat类的常用方法：
String format(Date date)	            将 Date 格式化日期/时间字符串
Calendar getCalendar()	                获取与此日期/时间格式相关联的日历
static DateFormat getDateInstance()	                        获取具有默认格式化风格和默认语言环境的日期格式
static DateFormat getDateInstance(int style)	            获取具有指定格式化风格和默认语言环境的日期格式
static DateFormat getDateInstance(int style,Locale locale)	获取具有指定格式化风格和指定语言环境的日期格式
static DateFormat getDateTimeInstance()	                                            获取具有默认格式化风格和默认语言环境的日期/时间格式
static DateFormat getDateTimeInstance(int dateStyle,int timeStyle)	                获取具有指定日期/时间格式化风格和默认语言环境的日期/时间格式
static DateFormat getDateTimeInstance(int dateStyle,int timeStyle,Locale locale)	获取具有指定日期/时间格式化风格和指定语言环境的日期/时间格式
static DateFormat getTimeInstance()	                        获取具有默认格式化风格和默认语言环境的时间格式
static DateFormat getTimeInstance(int style)	            获取具有指定格式化风格和默认语言环境的时间格式
static DateFormat getTimeInstance(int style,Locale locale)	获取具有指定格式化风格和指定语言环境的时间格式
void setCalendar(Calendar newCalendar)	为此格式设置日历
Date parse(String source)	            将给定的字符串解析成日期/时间

DateFormat 类格式化样式style：
SHORT：完全为数字，如 12.5.10 或 5:30pm。
MEDIUM：较长，如 May 10，2016。
LONG：更长，如 May 12，2016 或 11:15:32am。
FULL：是完全指定，如 Tuesday、May 10、2012 AD 或 11:l5:42am CST

java.text.SimpleDateFormat 是以与语言环境有关的方式来格式化和解析日期的具体类，允许进行格式化（日期→文本）、解析（文本→日期）和规范化。
SimpleDateFormat 可以选择任何用户定义的日期/时间格式的模式
SimpleDateFormat 类构造方法：
SimpleDateFormat()：                            用默认的格式和默认的语言环境构造 SimpleDateFormat
SimpleDateFormat(String pattern)：              用指定的格式和默认的语言环境构造 SimpleDateFormat
SimpleDateFormat(String pattern,Locale locale)：用指定的格式和指定的语言环境构造 SimpleDateFormat

SimpleDateFormat 自定义格式中常用的字母及含义：
y	年份。一般用 yy 表示两位年份，yyyy 表示 4 位年份	                        使用 yy 表示的年扮，如 11；使用 yyyy 表示的年份，如 2011
M	月份。一般用 MM 表示月份，如果使用 MMM，则会根据语言环境显示不同语言的月份	使用 MM 表示的月份，如 05；
                                                                        使用 MMM 表示月份，在 Locale.CHINA语言环境下，如“十月”；
                                                                                         在 Locale.US语言环境下，如 Oct
d	月份中的天数。一般用 dd 表示天数	                                    使用 dd 表示的天数，如 10
D	年份中的天数。表示当天是当年的第几天， 用 D 表示	                        使用 D 表示的年份中的天数，如 295
E	星期几。用 E 表示，会根据语言环境的不同， 显示不同语言的星期几	            使用 E 表示星期几，在 Locale.CHINA 语言环境下，如“周二”；
                                                                                         在 Locale.US 语言环境下，如 Thu
H	一天中的小时数（0~23)。一般用 HH 表示小时数	                            使用 HH 表示的小时数，如 18
h	一天中的小时数（1~12)。一般使用hh表 示小时数	                            使用 hh 表示的小时数，如 10 (注意 10 有可能是 10 点，也可能是 22 点）
m	分钟数。一般使用 mm 表示分钟数	                                        使用 mm 表示的分钟数，如 29
s	秒数。一般使用 ss 表示秒数	                                            使用 ss 表示的秒数，如 38
S	毫秒数。一般使用 SSS 表示毫秒数	                                        使用 SSS 表示的毫秒数，如 156



java.util.Locale 类：国际化类，专门描述区域和语言编码的类
构造方法：
    public Locale(String language);
    public Locale(String language, String country);
读取本地默认环境：
    public static Locale getDefault() {
            return defaultLocale;
    }



java.util.ResourceBundle: 读取资源属性文件（properties）
    public abstract class ResourceBundle{}
获取 ResourceBundle 实例化对象：
    1、使用类中的静态方法：public static final ResourceBundle getBundle(String baseName);
                        public static final ResourceBundle getBundle(String baseName, Locale locale);
        baseName: 指的是资源文件的名称，不带后缀
        eg：ResourceBundle rb = ResourceBundle.getBundle("文件包名 + 文件名");
        注：baseName 为 src 文件夹下的目录名
    2、利用子类向上转型进行对象实例化
根据 key 读取资源内容：
    public final String getString(String key)
    eg: 文件内容如下："info=加油啊，少年郎"，那么读取内容：rb.getString("info");  //加油啊，少年郎
    注：如果 key 不存在，则发生 java.util.MissingResourceException

注：properties需要遵循一定的命名规范： 自定义名_语言代码_国别代码.properties；默认的则为：自定义名.properties
  eg：myres_en_US.properties
      myres_zh_CN.properties
      myres.properties
  当在中文操作系统下，如果 myres_zh_CN.properties、myres.properties 两个文件都存在，则优先会使用 myres_zh_CN.properties，否则使用默认的 myres.properties



MessageFormat：消息格式化，适用于资源文件（properties）中一些占位符({0}、{1} ... )的格式内容替换
格式化文本方法：public static String format(String pattern, Object... arguments)

