标志符：标识符的第一个符号为字母、下划线和美元符号，后面可以是任何字母、数字、美元符号或下划线

关键字：
数据类型：boolean、int、long、short、byte、float、double、char、class、interface。
流程控制：if、else、do、while、for、switch、case、default、break、continue、return、try、catch、finally。
修饰符：public、protected、private、final、void、static、strict、abstract、transient、synchronized、volatile、native。
动作：package、import、throw、throws、extends、implements、this、supper、instanceof、new。
保留字：true、false、null、goto、const。

转义字符：
\ddd	1~3 位八进制数所表示的字符
\uxxxx	1~4 位十六进制数所表示的字符
\'	单引号字符
\"	双引号字符
\\	双斜杠字符
\r	回车
\n	换行
\b	退格
\t	横向跳格

基本数据类型：                包装器类型
字节型	    byte	1 字节	Byte        -128~127                  byte 类型是最小的整数类型
短整型	    short	2 字节	Short       -32768~32767
整型	        int	    4 字节	Integer     -2147483648~2147483647
长整型	    long	8 字节	Long        -9223372036854775808L~9223372036854775807L
单精度浮点型	float	4 字节	Float       +/-3.4E+38F（6~7 个有效位）
双精度浮点型	double	8 字节	Double      +/-1.8E+308 (15 个有效位）
字符型	    char	2 字节	Character   ISO 单一字符集
布尔型	    boolean	1 字节	Boolean     true 或 false

Java 进制转换：
二进制表示0b
八进制表示0
十六进制表示0x

引用数据类型：类、接口、数组
空引用（null）只能被转换成引用类型，不能转换成基本类型

逻辑运算符：
&&	a&&b	短路与	ab 全为 true 时，计算结果为 true，否则为 false。
||	a||b	短路或	ab 全为 false 时，计算结果为 false，否则为 true。
!	!a	    逻辑非	a 为 true 时，值为 false，a 为 false 时，值为 true
|	a|b	    逻辑或	ab 全为 false 时，计算结果为 false，否则为 true
&	a&b	    逻辑与	ab 全为 true 时，计算结果为 true，否则为 false
&& 与 & 区别：如果 a 为 false，则不计算 b（不论 b 为何值，是否有误，结果都为 false）
|| 与 | 区别：如果 a 为 true，则不计算 b（不论 b 为何值，是否会引起报错，结果都为 true）
逻辑运算符的优先级：！运算级别最高，&& 运算高于 || 运算。！运算符的优先级高于算术运算符，而 && 和 || 运算则低于关系（比较）运算符
关系运算符的优先级为：>、<、>=、<= 具有相同的优先级，并且高于具有相同优先级的 !=、==。关系运算符的优先级高于赋值运算符而低于算术运算符

自增自减运算符：
i++	将 i 的值先使用再加 1 赋值给 i 变量本身	int i=1;int j=i++;	i=2 j=1
++i	将 i 的值先加 1 赋值给变量 i 本身后再使用	int i=1;int j=++i;	i=2 j=2
i--	将 i 的值先使用再减 1 赋值给变量 i 本身	int i=1; int j=i--;	i=0 j=1
--i	将 i 的值先减 1 后赋值给变量 i 本身再使用	int i=1; int j=--i;	i=0 j=0

位运算符：
&	按位进行与运算（AND）	    4 & 5	4
|	按位进行或运算（OR）	    4 | 5	5
^	按位进行异或运算（XOR）	4 ^ 5	1      1 ^ 5   4
~	按位进行取反运算（NOT）	~4	    -5
正数的原码，反码，补码一样；负数反码是原码各位取反（0变1,1变0）符号位不变，补码是反码加1
补码是数字在计算机中存在的形态，数字位运算都是通过补码计算
-5                     -4                   -11
原码：1000 0101         原码：1000 0100       原码：1000 1011
反码：1111 1010         反码：1111 1011       反码：1111 0100
补码：1111 1011         补码：1111 1100       补码：1111 0101
~(-11)   补码：0000 1010 反码：0000 1010 原码：0000 1010  10
-5 & -4  补码：1111 1000 反码：1111 0111 原码：1000 1000  -8
-5 | -4  补码：1111 1111 反码：1111 1110 原码：1000 0001  -1
-5 ^ -4  补码：0000 0111 反码：0000 0111 原码：0000 0111  7

位移运算符：
>>	右移位运算符	8 >> 1	4
<<	左移位运算符	9 << 2	36
左移位运算符规则：按二进制形式把所有的数字向左移动对应的位数，高位移出（舍弃），低位的空位补零，符号位不变
右位移运算符规则：按二进制形式把所有的数字向右移动对应的位数，低位移出（舍弃），(正数补码)高位的空位补0，(负数补码)高位的空位补1，符号位不变
a << x == (int) (a * Math.pow(2, x))
a >> x == (int) Math.floor(a / Math.pow(2, x))
-13 >> 2 原码：1000 1101 反码：1111 0010 补码：1111 0011   >> 2   补码：1111 1100 反码：1111 1011 原码：1000 0100 -4
-13 << 2 原码：1000 1101 反码：1111 0010 补码：1111 0011   << 2   补码：1100 1100 反码：1100 1011 原码：1011 0100 -52
-11 >> 2 原码：1000 1011 反码：1111 0100 补码：1111 0101   >> 2   补码：1111 1101 反码：1111 1100 原码：1000 0011 -3
>>>  无符号右位移运算符
按二进制形式把所有的数字向右移动对应的位数，低位移出（舍弃），(正数或负数补码)高位的空位都补0


条件运算符：
result=<expression>?<statement1>:<statement3>;

运算符优先级：单目运算符优先级较高，赋值运算符优先级较低。算术运算符优先级较高，关系和逻辑运算符优先级较低
优先级	                   运算符	                  结合性
1	()、[]、{}	                                     从左向右
2	!、+、-、~、++、--	                             从右向左
3	*、/、%	                                         从左向右
4	+、-	                                         从左向右
5   <<、>>、>>>	                                     从左向右
6	<、<=、>、>=、instanceof	                         从左向右
7	==、!=	                                         从左向右
8	&	                                             从左向右
9	^	                                             从左向右
10	|	                                             从左向右
11	&&	                                             从左向右
12	||	                                             从左向右
13	?:	                                             从右向左
14	=、+=、-=、*=、/=、&=、|=、^=、~=、«=、»=、>>>=	 从右向左